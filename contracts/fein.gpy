# { "Depends": "py-genlayer:std" }
from genlayer import *

class TokenData(gl.Struct):
    tokenSupply: int
    countOfTotalSupply: int
    uri: str
    creator: Address
    fundsCollected: int
    revenue: int
    totalFractionalAmount: int
    soldOut: bool
    isReleased: bool
    percentageShare: int
    pricePerToken: int

class Fein(gl.Contract):
    currentTokenID: int
    contractOwner: Address
    tokenData: gl.Mapping[int, TokenData]
    participants: gl.Mapping[int, gl.List[Address]]
    fractionalOwnership: gl.Mapping[int, gl.Mapping[Address, int]]

    def __init__(self):
        self.currentTokenID = 0
        self.contractOwner = gl.sender()
        self.tokenData = gl.Mapping()
        self.participants = gl.Mapping()
        self.fractionalOwnership = gl.Mapping()

    @gl.public.view
    def getContractOwner(self) -> Address:
        return self.contractOwner

    @gl.public.write
    def mintNFT(self, totalSupply: int, totalFractionalAmount: int, percentageShare: int) -> int:
        id = self.currentTokenID

        uri = f"https://apricot-adorable-buzzard-685.mypinata.cloud/ipfs/QmafYVRMa9aWj2QZACYeUfbDXttryS5SydazdijXcNVfms/{id}.json"

        self.tokenData[id] = TokenData(
            tokenSupply=totalSupply,
            countOfTotalSupply=totalSupply,
            uri=uri,
            creator=gl.sender(),
            fundsCollected=0,
            revenue=0,
            totalFractionalAmount=totalFractionalAmount,
            soldOut=False,
            isReleased=False,
            percentageShare=percentageShare,
            pricePerToken=totalFractionalAmount // totalSupply
        )
        self.participants[id] = gl.List()
        self.currentTokenID += 1

        return id

    @gl.public.view
    def geturi(self, tokenId: int) -> str:
        return self.tokenData[tokenId].uri

    @gl.public.write.payable
    def buyStake(self, tokenId: int, number: int):
        token = self.tokenData[tokenId]
        availableFraction = token.tokenSupply
        pricePerToken = token.pricePerToken
        requiredAmount = pricePerToken * number

        gl.require(token.soldOut == False, "Token is sold out")
        gl.require(availableFraction > 0, "No fractional ownership available")
        gl.require(availableFraction >= number, "Not enough fractional ownership available")
        gl.require(gl.value() >= requiredAmount, "Incorrect amount sent")

        if not self.fractionalOwnership.contains(tokenId):
            self.fractionalOwnership[tokenId] = gl.Mapping()

        if not self.fractionalOwnership[tokenId].contains(gl.sender()):
            participantList = self.participants[tokenId]
            participantList.append(gl.sender())
            self.participants[tokenId] = participantList
            self.fractionalOwnership[tokenId][gl.sender()] = 0

        self.fractionalOwnership[tokenId][gl.sender()] += number
        token.fundsCollected += gl.value()
        token.tokenSupply -= number

        if token.tokenSupply == 0:
            token.soldOut = True

        self.tokenData[tokenId] = token

    @gl.public.write.payable
    def addRevenueGen(self, tokenId: int):
        gl.require(self.tokenData.contains(tokenId), "NFT does not exist")
        gl.require(gl.value() > 0, "No funds provided")
        token = self.tokenData[tokenId]
        token.revenue += gl.value()
        self.tokenData[tokenId] = token

    @gl.public.write
    def distributeRevenue(self, tokenId: int):
        gl.require(gl.sender() == self.contractOwner, "Not the owner")
        token = self.tokenData[tokenId]
        gl.require(token.isReleased == True, "Song must be released to distribute revenue")

        revenue = token.revenue
        percentageShare = token.percentageShare
        amountToDistribute = (revenue * percentageShare) // 100
        totalFraction = token.totalFractionalAmount

        gl.require(amountToDistribute > 0, "No funds available for distribution")
        gl.require(totalFraction > 0, "No fractions sold")

        for holder in self.participants[tokenId]:
            holderFraction = self.fractionalOwnership[tokenId][holder]
            if holderFraction > 0:
                share = (amountToDistribute * holderFraction) // token.countOfTotalSupply
                gl.transfer(holder, share)

        artistShare = revenue - amountToDistribute
        gl.transfer(token.creator, artistShare)

    @gl.public.write
    def releaseSong(self, tokenId: int):
        token = self.tokenData[tokenId]
        gl.require(token.isReleased == False, "Song already released")
        token.isReleased = True
        self.tokenData[tokenId] = token

    @gl.public.write
    def artistTokenSales(self, tokenId: int):
        gl.require(gl.sender() == self.contractOwner, "Not the owner")
        token = self.tokenData[tokenId]
        gl.require(token.isReleased == True, "Song not released yet")
        gl.transfer(token.creator, token.fundsCollected)

    @gl.public.write
    def withdrawFunds(self, tokenId: int):
        gl.require(gl.sender() == self.contractOwner, "Not the owner")
        token = self.tokenData[tokenId]
        balance = token.revenue
        gl.require(balance > 0, "No funds to withdraw")
        gl.transfer(self.contractOwner, balance)

    @gl.public.write
    def withdrawToOwner(self):
        gl.require(gl.sender() == self.contractOwner, "Not the owner")
        gl.transfer(self.contractOwner, gl.balance())

    @gl.public.view
    def getparticipants(self, tokenId: int) -> gl.List[Address]:
        return self.participants[tokenId]
